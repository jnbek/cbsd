# Compare imghelper_version with forms version
check_version()
{
	local forms_version=
	
	forms_version=$( cbsdsql ${formfile} SELECT version FROM system )

	[ -z "${forms_version}" ] && err 1 "${MAGENTA}Unsupported image schema: version is empty${NORMAL}"
	[ ${forms_version} -gt ${imghelper_version} ] && err 1 "${MAGENTA}Unsupported image schema. Image version is: ${GREEN}${forms_version}${MAGENTA}. Please update CBSD first${NORMAL}"
	return 0
}


# if all_filled; then
#    echo "ALL FILLED"
# fi
all_filled()
{
	local i _T

	for i in ${param}; do
		eval _T=\${${i}}
		eval mandatory=\${$i}_mandatory}
		[ -z "${_T}" -a "${mandatory}" = "1" ] && return 1
	done

	return 0
}

# $1 - specify field to update, default is 'new' column
update_params()
{
	local i _T _imgformfile
	local _target="new"

	[ -n "${1}" ] && _target="${1}"

	[ ! -d "${jailsysdir}/${jname}/helpers" ] && mkdir -p ${jailsysdir}/${jname}/helpers

	_imgformfile="${jailsysdir}/${jname}/helpers/${helpername}.sqlite"

	[ "${cfg_existing}" != "1" ] && /bin/cp -aH ${formfile} ${_imgformfile}

	for i in ${param}; do
		eval _T=\${${i}}
		[ -z "${_T}" ] && continue
		${miscdir}/sqlcli ${_imgformfile} UPDATE forms SET ${_target}=\"${_T}\" WHERE param=\"${i}\"
	done

	echo "${helpername} formfile for ${jname}: updated"

	return 0

}


load_forms()
{
	local param

	[ ! -f ${formfile} ] && err 1 "${MAGENTA}formfile not found: ${GREEN}${formfile}${NORMAL}"

	param=$( cbsdsql ${formfile} SELECT param FROM forms ORDER BY order_id |/usr/bin/xargs )
	helpername=$( cbsdsql ${formfile} SELECT helpername FROM system )
	packages=$( cbsdsql ${formfile} SELECT packages FROM system )
	have_restart=$( cbsdsql ${formfile} SELECT have_restart FROM system )

	[ "${have_restart}" = "0" ] && unset have_restart

	[ "${packages}" = "0" ] && packages=""

	local _env

	eval $( for i in ${param}; do
		unset _env
		desc="$( cbsdsql ${formfile} SELECT desc FROM forms WHERE param=\"${i}\" )"

		# check for H_environment
		eval _res="\$H_${i}"
		if [ -n "${_res}" ]; then
			# environment is preferred
			echo "${i}=\"${_res}\""
		else
			# preferred for cur value
			unset cur
			cur="$( cbsdsql ${formfile} SELECT cur FROM forms WHERE param=\"${i}\" )"
			if [ -n "${cur}" ]; then
				def="${cur}"
			else
				def="$( cbsdsql ${formfile} SELECT def FROM forms WHERE param=\"${i}\" )"
			fi
			echo "${i}=\"${def}\""
		fi

		attr="$( cbsdsql ${formfile} SELECT attr FROM forms WHERE param=\"${i}\" )"
		xattr="$( cbsdsql ${formfile} SELECT xattr FROM forms WHERE param=\"${i}\" )"
		mandatory="$( cbsdsql ${formfile} SELECT mandatory FROM forms WHERE param=\"${i}\" )"
		echo "${i}_desc=\"${desc}\""
		echo "${i}_mandatory=\"${mandatory}\""
	done )
}


load_new()
{
	[ ! -f ${formfile} ] && err 1 "${MAGENTA}formfile not found: ${GREEN}${formfile}${NORMAL}"

	local param
	param=$( cbsdsql ${formfile} SELECT param FROM forms ORDER BY order_id |/usr/bin/xargs )
	local _env

	eval $( for i in ${param}; do
		unset _env new

		new="$( cbsdsql ${formfile} SELECT new FROM forms WHERE param=\"${i}\" )"
		[ -z "${new}" ] && continue
		echo "${i}=\"${new}\""
	done )
}
