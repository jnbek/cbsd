#!/usr/local/bin/cbsd
#v10.1.5
MYARG=""
MYOPTARG="formfile bootstrap module jname updcol"
MYDESC="Ncurses-based jail image boostrap helper"
ADDHELP="updcol = new (default) update new column, cur - update cur column\n"
EXTHELP="wf_imghelper.html"

. ${subr}
. ${settingstui}
. ${tools}
. ${strings}
. ${system}
. ${dialog}

if [ "${1}" != "--help" -a "${1}" != "--args" ]; then
	# assume that this is the path to form when path geing with slash
	prefix=$( substr --pos=0 --len=1 --str=${1} )
	if [ "${prefix}" = "/" ]; then
		formfile="${1}"
		[ ! -f "${1}" ] && err 1 "${MAGENTA}No such form file: ${GREEN}${formfile}${NORMAL}"
		shift
		param=$( cbsdsql ${formfile} SELECT param FROM forms ORDER BY order_id |/usr/bin/xargs )
		MYOPTARG="${MYOPTARG} ${param}"
	fi
fi

init $*

readconf helpers.conf
. ${workdir}/imghelper.subr

dialog_menu_main()
{
	local _par VAL
	local btitle="$DIALOG_BACKTITLE"
	local prompt="Use menu for select and edit limit"
	local hline=
	local defaultitem=

	local mytargets=

	f_dialog_default_fetch defaultitem

	[ -n "${jname}" ] && mytargets="for ${jname} "

	local title=" Image parameters ${mytargets}"
	local _mydesc

	local menu_list=

	for _items in ${param}; do
		eval VAL=\$${_items}

		if [ -z "${VAL}" ]; then
			menu_list="${menu_list} '${_items}'	' '	'${_mydesc}'"
		else
			menu_list="${menu_list} '${_items}'	'${VAL}'	'${_mydesc}'"
		fi
	done

	menu_list="${menu_list} 'COMMIT'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

# inputform
get_helper_value()
{
	local _input _retval

	f_dialog_title " ${mtag} "

	eval VAL=\$${mtag}
	eval _mydesc=\$${mtag}_desc

	f_dialog_input _input "${_mydesc}" "${VAL}" \
		"${_message}" || return $?

	[ -n "${_input}" ] && eval ${mtag}="${_input}"

}

#### [ MAIN AREA ] ####
# we work in two modes:
# when we got bootstrap file ( which shall contain install_img )
# or only formfile ( can be set in boostrap )
#
# When no bootstrap - load and execute form then exist
# when bootstrap exist - after form execute install_img func
#

# Show list modules with no arg
if [ -z "${1}" ]; then
	${ECHO} "${MAGENTA}Current helper module: ${GREEN}${helper_module}${NORMAL}"
	[ ! -d ${moduledir}/${helper_module}.d ] && exit 0
	${ECHO} "${MAGENTA}Available modules:${NORMAL}"
	${ECHO} "${BOLD}"
	/usr/bin/find ${moduledir}/${helper_module}.d  -type d -depth 1 -maxdepth 1 -name module_* -exec /usr/bin/basename {} \; |while read _dir; do
		p1=${_dir%%_*}
		p2=${_dir##*_}
		echo ${p2}
	done
	${ECHO} "${NORMAL}"
	exit 0
fi

if [ -n "${jname}" ]; then
	. ${jrcconf}
	[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
	with_bootstrap=1
	: ${with_bootstrap=1}
fi

: ${with_bootstrap=0}

# imghelper_version
# Compare this YYYMM serial with database forms version. When forms have greater number
# this helper is not support this
imghelper_version="201510"
cfg_existing=0

[ -z "${updcol}" ] && updcol="new"

if [ -n "${jname}" -a -n "${module}" ]; then
	cfg_existing=1
	: ${formfile="${jailsysdir}/${jname}/helpers/${module}.sqlite"}
	if [ ! -r ${formfile} ]; then
		formfile="${workdir}/formfile/${module}.sqlite"
		cfg_existing=0
	else
		cfg_existing=1
		updcol="cur"
	fi
elif [ -n "${module}" ]; then
	: ${formfile="${workdir}/formfile/${module}.sqlite"}
fi

[ ! -f "${formfile}" ] && err 1 "Formfile doesn't exist: ${formfile}"

if [ -z "${helper_workdir}" ]; then
	helper_workdir=$( /usr/bin/dirname ${formfile} )
fi

check_version

param=$( cbsdsql ${formfile} SELECT param FROM forms ORDER by idx |/usr/bin/xargs )
load_forms
x=1

while [ ${x} -eq 1 ]; do
	dialog_menu_main
	ret=$?
	case $ret in
		${DIALOG_OK})
			case "${mtag}" in
				"COMMIT")
					if all_filled; then
						x=0
						continue
					else
						f_dialog_msgbox "All field is mandatory"
					fi
					continue
					;;
				*)
					get_helper_value
					;;
			esac
			;;
		*)
			f_die
			;;
	esac
done

# no bootrstap? this is the end my beautiful friend
[ ${with_bootstrap} -eq 0 ] && f_die

# Update new value
update_params ${updcol}

# commit when works with module
[ -n "$helper_module}" ] && ${helper_module} jname=${jname} module=${module} mode=apply

